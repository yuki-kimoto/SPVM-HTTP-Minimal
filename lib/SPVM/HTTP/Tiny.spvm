# Copyright (c) 2023 Yuki Kimoto
# MIT License

class HTTP::Tiny {
  version "0.001_001";
  
  use Fn;
  use Regex;
  use HTTP::Tiny::CookieJar::Interface;
  use HTTP::Tiny::Handle;
  use Hash;
  use Sys::Env;
  use MIME::Base64;
  use Sys;
  use Format;
  use Time::Local;
  use Sys::Time::Tm;
  use Scope::Guard;
  
  our $DoW : string;
  our $MoY : string;
  
  INIT {
    $DoW = "Sun|Mon|Tue|Wed|Thu|Fri|Sat";
    $MoY = "Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec";
  }
  
  has default_headers : string[];
  has http_proxy : string;
  has https_proxy : string;
  has keep_alive : int;
  has local_address : string;
  has max_redirect : int;
  has max_size : int;
  has proxy : string;
  has cookie_jar : HTTP::Tiny::CookieJar::Interface;
  has SSL_options : object[];
  has verify_SSL : int;
  has agent : ro string;
  has timeout : ro int;
  has handle : HTTP::Tiny::Handle;
  has no_proxy : string[];
  has _has_proxy : Hash;
  
  

  method set_agent : void ($agent : string) {
    
    if ($agent && Regex->new(" $")->match($agent)) {
      $agent = $agent . &_agent;
    }
    
    $self->{agent} = $agent;
  }
  
  private static method _agent : string () {
    
    my $default_agent = "HTTP-Tiny";
    
    my $version = Fn->get_version_string("HTTP::Tiny");
    
    $default_agent .= "/$version";
    
    return $default_agent;
  }
  
  method set_timeout : void ($timeout : int) {
    $self->{timeout} = $timeout;
    if ($self->{handle}) {
      $self->{handle}->set_timeout($timeout);
    }
  }
  
  static method new : HTTP::Tiny ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $self = new HTTP::Tiny;
    
    $self->{max_redirect} = 5;
    
    $self->{timeout} = $options_h->delete_or_default_int("timeout", 60);
    
    $self->{keep_alive} = $options_h->delete_or_default_int("keep_alive", 1);
    
    $self->{verify_SSL} = $options_h->delete_or_default_int("verify_SSL", 0);
    
    my $env_no_proxy = Sys::Env->getenv("no_proxy");
    my $no_proxy_default = (string[])undef;
    if ($env_no_proxy) {
      $no_proxy_default = [$env_no_proxy];
    }
    else {
      $no_proxy_default = new string [0];
    }
    $self->{no_proxy} = (string[])$options_h->delete_or_default("no_proxy", $no_proxy_default);
    
    $self->{cookie_jar} = (HTTP::Tiny::CookieJar::Interface)$options_h->delete_or_default("cookie_jar", undef);
    
    $self->{default_headers} = (string[])$options_h->delete_or_default("default_headers", undef);
    
    $self->{http_proxy} = $options_h->delete_or_default_string("http_proxy", undef);
    
    $self->{https_proxy} = $options_h->delete_or_default_string("https_proxy", undef);
    
    $self->{local_address} = $options_h->delete_or_default_string("local_address", undef);
    
    $self->{max_redirect} = $options_h->delete_or_default_int("max_redirect", -1);
    
    $self->{max_size} = $options_h->delete_or_default_int("max_size", -1);
    
    $self->{proxy} = $options_h->delete_or_default_string("proxy", undef);
    
    $self->{SSL_options} = (object[])$options_h->delete_or_default("SSL_options", undef);
    
    $self->{verify_SSL} = $options_h->delete_or_default_int("verify_SSL", 0);
    
    $self->{agent} = $options_h->delete_or_default_string("agent", &_agent);
    
    # $self->_set_proxies;
    
    return $self;
  }
  
  private method _uri_escape : string ($string : string) {
    
    my $regex = Regex->new("([^A-Za-z0-9\-\._~])");
    my $escaped_string = $regex->replace_g($string, method : string ($re : Regex) {
      my $bytes = $re->cap1;
      
      my $escaped_char_buffer = StringBuffer->new;
      
      for (my $i = 0; $i < length $bytes; $i++) {
        my $byte = $bytes->[$i];
        my $hex_string = Format->sprintf("%%%02X", [(object)($byte & 0xFF)]);
        $escaped_char_buffer->push($hex_string);
      }
      
      my $escaped_char = $escaped_char_buffer->to_string;
      
      return $escaped_char;
    });
    
    return $escaped_string;
  }
  
  private method _http_date : string ($time : long) {
    
    my $tm = Sys->gmtime($time);
    
    my $http_date = Format->sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",
      [
        (object)Fn->substr($DoW, $tm->tm_wday * 4, 3),
        $tm->tm_mday, Fn->substr($MoY, $tm->tm_mon * 4, 3), $tm->tm_year + 1900,
        $tm->tm_hour, $tm->tm_min, $tm->tm_sec,
      ]
    );
    
    return $http_date;
  }
  
  private method _parse_http_date : long ($string : string) {
    my $tm = Sys::Time::Tm->new;
    
    my $re1 = Regex->new("^[SMTWF][a-z]+, +(\d{1,2}) ($MoY) +(\d\d\d\d) +(\d\d):(\d\d):(\d\d) +GMT$");
    my $re2 = Regex->new("^[SMTWF][a-z]+, +(\d\d)-($MoY)-(\d{2,4}) +(\d\d):(\d\d):(\d\d) +GMT$");
    my $re3 = Regex->new("^[SMTWF][a-z]+, +(\d{1,2}) ($MoY) +(\d\d\d\d) +(\d\d):(\d\d):(\d\d) +GMT$");
    if ($re1->match($string)) {
      $tm->set_tm_sec(Fn->to_int($re1->cap6));
      $tm->set_tm_min(Fn->to_int($re1->cap5));
      $tm->set_tm_hour(Fn->to_int($re1->cap4));
      $tm->set_tm_mday(Fn->to_int($re1->cap1));
      $tm->set_tm_mon((Fn->index($MoY, $re1->cap2) / 4));
      $tm->set_tm_year(Fn->to_int($re1->cap3));
    }
    elsif ($re2->match($string)) {
      $tm->set_tm_sec(Fn->to_int($re1->cap6));
      $tm->set_tm_min(Fn->to_int($re1->cap5));
      $tm->set_tm_hour(Fn->to_int($re1->cap4));
      $tm->set_tm_mday(Fn->to_int($re1->cap1));
      $tm->set_tm_mon((Fn->index($MoY, $re1->cap2) / 4));
      $tm->set_tm_year(Fn->to_int($re1->cap3));
    }
    elsif ($re3->match($string)) {
      $tm->set_tm_sec(Fn->to_int($re1->cap5));
      $tm->set_tm_min(Fn->to_int($re1->cap4));
      $tm->set_tm_hour(Fn->to_int($re1->cap3));
      $tm->set_tm_mday(Fn->to_int($re1->cap2));
      $tm->set_tm_mon((Fn->index($MoY, $re1->cap1) / 4));
      $tm->set_tm_year(Fn->to_int($re1->cap6));
    }
    
    my $time = -1L;
    eval { $time = Time::Local->timegm($tm); };
    
    return $time;
  }

  method _set_proxies : void () {
    
    # generic proxy
    if (!$self->{proxy} ) {
      $self->{proxy} = Sys::Env->getenv("all_proxy") || Sys::Env->getenv("ALL_PROXY");
    }
    
    if ($self->{proxy} ) {
      $self->_split_proxy("generic proxy", $self->{proxy}); # validate
    }
    else {
      $self->{proxy} = undef;
    }
    
    # http proxy
    if (!$self->{http_proxy} ) {
      # under CGI, bypass HTTP_PROXY as request sets it from Proxy header
      my $old_http_proxy = Sys::Env->getenv("HTTP_PROXY");
      my $resotre_http_proxy = Scope::Guard->new([has old_http_proxy : string = $old_http_proxy]method : void () {
        Sys::Env->setenv("HTTP_PROXY", $self->{old_http_proxy}, 1);
      });
      if (Sys::Env->getenv("REQUEST_METHOD")) {
        
        my $http_proxy = Sys::Env->getenv("CGI_HTTP_PROXY");
        unless ($http_proxy) {
          $http_proxy = "";
        }
        Sys::Env->setenv("HTTP_PROXY", $http_proxy, 1);
      }
      
      my $http_proxy = Sys::Env->getenv("http_proxy");
      unless ($http_proxy) {
        $http_proxy = Sys::Env->getenv("HTTP_PROXY");
      }
      unless ($http_proxy) {
        $http_proxy = $self->{proxy};
      }
      
      $self->{http_proxy} = $http_proxy;
    }
    
    if ($self->{http_proxy} ) {
      $self->_split_proxy("http_proxy", $self->{http_proxy}); # validate
      $self->{_has_proxy}->set("http", 1);
    }
    else {
      $self->{http_proxy} = undef;
    }
    
    # https proxy
    if (!$self->{https_proxy}) {
      $self->{https_proxy} = Sys::Env->getenv("https_proxy") || Sys::Env->getenv("HTTPS_PROXY") || $self->{proxy};
    }
    
    if ($self->{https_proxy}) {
      $self->_split_proxy("https_proxy", $self->{https_proxy} ); # validate
      $self->{_has_proxy}->set("https", 1);
    }
    else {
      $self->{https_proxy} = undef;
    }
    
    return;
  }
  
  private method _split_proxy : string[] ($type : string, $proxy : string) {
    
    my $scheme = (string)undef;
    my $host = (string)undef;
    my $port = (string)undef;
    my $path_query = (string)undef;
    my $auth = (string)undef;
    
    {
      my $ret = $self->_split_url($proxy);
      $scheme = $ret->[0];
      $host = $ret->[1];
      $port = $ret->[2];
      $path_query = $ret->[3];
      $auth = $ret->[4];
    }
    
    unless($scheme && $scheme && $host && $port && $path_query eq "/") {
      die "$type URL must be in format http[s]://[auth@]<host>:<port>/\n";
    }
    
    return [$scheme, $host, $port, $auth];
  }
  
  private static method substr_replacement : string ($string : string, $offset : int, $length : int = -1, $replacement : string = undef) {
    
    unless ($string) {
      die "The \$string must be defined.";
    }
    
    unless ($offset >= 0) {
      die "The \$offset must be greater than or equal to 0.";
    }
    
    my $string_length = length $string;
    if ($length < 0) {
      $length = $string_length - $offset;
    }
    
    unless ($offset + $length <= $string_length) {
      die "The \$offset + the \$length must be less than or equal to the length of the \$string.";
    }
    
    my $substring = (string)undef;
    if ($replacement) {
      
      $substring = Fn->substr($string, 0, $offset) . $replacement . Fn->substr($string, $length - $offset);
    }
    else {
      $substring = (mutable string)new_string_len($length);
      Fn->memcpy($substring, 0, $string, $offset, $length);
    }
    
    return $substring;
  }
  
  private method _split_url : string[] ($url : string) {
    
    # URI regex adapted from the URI module
    my $scheme = (string)undef;
    my $host = (string)undef;
    my $path_query = (string)undef;
    
    if (my $match = Regex->new("\A([^:/?#]+)://([^/?#]*)([^#]*)")->match($url)) {
      $scheme = $match->cap1;
      $host = $match->cap2;
      $path_query = $match->cap3;
    }
    else {
      die "Cannot parse URL: \"$url\"";
    }
    
    $scheme = Fn->lc($scheme);
    
    unless (Regex->new("\A/")->match($path_query)) {
      $path_query = "/$path_query";
    }
    
    my $auth = "";
    if ((my $i = Fn->index($host, '@')) != -1 ) {
      # user:pass@host
      $auth = &substr_replacement($host, 0, $i, ""); # take up to the @ for auth
      &substr_replacement($host, 0, 1, "");          # knock the @ off the host
      
      # userinfo might be percent escaped, so recover real auth info
      Regex->new("%([0-9A-Fa-f]{2})")->replace_g($auth, method : string ($re : Regex, $match : Regex::Match) {
        return Fn->chr(Fn->hex($match->cap1));
      });
    }
    
    my $port = (string)undef;
    
    my $replace_info_ref = [(Regex::ReplaceInfo)undef];
    if (Regex->new(":(\d*)\z")->replace($host, "", 0, -1, {info => $replace_info_ref})) {
      my $match = $replace_info_ref->[0]->match;
      $port = $match->cap1;
    }
    
    unless ($port) {
      if ($scheme eq "http") {
        $port = "80";
      }
      elsif ($scheme eq "https") {
        $port = "443";
      }
    }
    
    if ($host) {
      $host = Fn->lc($host);
    }
    else {
      $host = "localhost";
    }
    
    return [$scheme, $host, $port, $path_query, $auth];
  }
  
  method get : Hash ($url : string, $options : object[] = undef) {
    my $response = $self->request("GET", $url, $options);
    return $response;
  }
  
  method head : Hash ($url : string, $options : object[] = undef) {
    my $response = $self->request("HEAD", $url, $options);
    return $response;
  }
  
  method put : Hash ($url : string, $options : object[] = undef) {
    my $response = $self->request("PUT", $url, $options);
    return $response;
  }
  
  method post : Hash ($url : string, $options : object[] = undef) {
    my $response = $self->request("POST", $url, $options);
    return $response;
  }
  
  method patch : Hash ($url : string, $options : object[] = undef) {
    my $response = $self->request("PATCH", $url, $options);
    return $response;
  }
  
  method delete : Hash ($url : string, $options : object[] = undef) {
    my $response = $self->request("DELETE", $url, $options);
    return $response;
  }
  
  method request ($method : string, $url : string, $options : object[] = undef) {
    
    # RFC 2616 Section 8.1.4 mandates a single retry on broken socket
    my $response = (Hash)undef;
    my $exception = (string)undef;
    for (my $i = 0; $i <= 1; $i++) {
      eval {
        $response = $self->_request($method, $url, $options)
      };
      
      my $idempotent = Hash->new({GET => 1, HEAD => 1, PUT => 1, DELETE => 1, OPTIONS => 1, TRACE => 1});
      
      $exception = $@;
      
      unless ($exception && (int)$idempotent->get($method) && Regex->new("^(?:Socket closed|Unexpected end|SSL read error)")->match($idempotent)) {
        last;
      }
    }
    
    if ($exception) {
        # maybe we got a response hash thrown from somewhere deep
        if ( ref $e eq 'HASH' && exists $e->{status} ) {
            $e->{redirects} = delete $options->{_redirects} if @{ $options->{_redirects} || []};
            return $e;
        }
        
        # otherwise, stringify it
        $e = "$e";
        $response = {
            url     => $url,
            success => q{},
            status  => 599,
            reason  => 'Internal Exception',
            content => $e,
            headers => {
                'content-type'   => 'text/plain',
                'content-length' => length $e,
            },
            ( @{$options->{_redirects} || []} ? (redirects => delete $options->{_redirects}) : () ),
        };
    }
    
    return $response;
  }
}

=pod


  for my $sub_name ( qw/get head put post patch delete/ ) {
      my $req_method = uc $sub_name;
      no strict 'refs';
      eval <<"HERE"; ## no critic
      method $sub_name {
          my (\$self, \$url, \$options) = \@_;
          \@_ == 2 || (\@_ == 3 && ref \$options eq 'HASH')
          or _croak(q/Usage: \$http->$sub_name(URL, [HASHREF])/ . "\n");
          return \$self->request('$req_method', \$url, \$options || {});
      }
  HERE
  }

  method post_form {
      my ($self, $url, $data, $options) = @_;
      (@_ == 3 || @_ == 4 && ref $options eq 'HASH')
          or _croak(q/Usage: $http->post_form(URL, DATAREF, [HASHREF])/ . "\n");

      my $headers = {};
      while ( my ($key, $value) = each %{$options->{headers} || {}} ) {
          $headers->{lc $key} = $value;
      }

      return $self->request('POST', $url, {
              # Any existing 'headers' key in $options will be overridden with a
              # normalized version below.
              %$options,
              content => $self->www_form_urlencode($data),
              headers => {
                  %$headers,
                  'content-type' => 'application/x-www-form-urlencoded'
              },
          }
      );
  }

  method mirror {
      my ($self, $url, $file, $options) = @_;
      @_ == 3 || (@_ == 4 && ref $options eq 'HASH')
        or _croak(q/Usage: $http->mirror(URL, FILE, [HASHREF])/ . "\n");

      if ( exists $options->{headers} ) {
          my $headers = {};
          while ( my ($key, $value) = each %{$options->{headers} || {}} ) {
              $headers->{lc $key} = $value;
          }
          $options->{headers} = $headers;
      }

      if ( -e $file and my $mtime = (stat($file))[9] ) {
          $options->{headers}{'if-modified-since'} ||= $self->_http_date($mtime);
      }
      my $tempfile = $file . int(rand(2**31));

      require Fcntl;
      sysopen my $fh, $tempfile, Fcntl::O_CREAT()|Fcntl::O_EXCL()|Fcntl::O_WRONLY()
         or _croak(qq/Error: Could not create temporary file $tempfile for downloading: $!\n/);
      binmode $fh;
      $options->{data_callback} = method { print {$fh} $_[0] };
      my $response = $self->request('GET', $url, $options);
      close $fh
          or _croak(qq/Error: Caught error closing temporary file $tempfile: $!\n/);

      if ( $response->{success} ) {
          rename $tempfile, $file
              or _croak(qq/Error replacing $file with $tempfile: $!\n/);
          my $lm = $response->{headers}{'last-modified'};
          if ( $lm and my $mtime = $self->_parse_http_date($lm) ) {
              utime $mtime, $mtime, $file;
          }
      }
      $response->{success} ||= $response->{status} eq '304';
      unlink $tempfile;
      return $response;
  }

  my %idempotent = map { $_ => 1 } qw/GET HEAD PUT DELETE OPTIONS TRACE/;

  method request {
      my ($self, $method, $url, $options) = @_;
      @_ == 3 || (@_ == 4 && ref $options eq 'HASH')
        or _croak(q/Usage: $http->request(METHOD, URL, [HASHREF])/ . "\n");
      $options ||= {}; # we keep some state in this during _request

      # RFC 2616 Section 8.1.4 mandates a single retry on broken socket
      my $response;
      for ( 0 .. 1 ) {
          $response = eval { $self->_request($method, $url, $options) };
          last unless $@ && $idempotent{$method}
              && $@ =~ m{^(?:Socket closed|Unexpected end|SSL read error)};
      }

      if (my $e = $@) {
          # maybe we got a response hash thrown from somewhere deep
          if ( ref $e eq 'HASH' && exists $e->{status} ) {
              $e->{redirects} = delete $options->{_redirects} if @{ $options->{_redirects} || []};
              return $e;
          }

          # otherwise, stringify it
          $e = "$e";
          $response = {
              url     => $url,
              success => q{},
              status  => 599,
              reason  => 'Internal Exception',
              content => $e,
              headers => {
                  'content-type'   => 'text/plain',
                  'content-length' => length $e,
              },
              ( @{$options->{_redirects} || []} ? (redirects => delete $options->{_redirects}) : () ),
          };
      }
      return $response;
  }

  method www_form_urlencode {
      my ($self, $data) = @_;
      (@_ == 2 && ref $data)
          or _croak(q/Usage: $http->www_form_urlencode(DATAREF)/ . "\n");
      (ref $data eq 'HASH' || ref $data eq 'ARRAY')
          or _croak("form data must be a hash or array reference\n");

      my @params = ref $data eq 'HASH' ? %$data : @$data;
      @params % 2 == 0
          or _croak("form data reference must have an even number of terms\n");

      my @terms;
      while( @params ) {
          my ($key, $value) = splice(@params, 0, 2);
          _croak("form data keys must not be undef")
              if !defined($key);
          if ( ref $value eq 'ARRAY' ) {
              unshift @params, map { $key => $_ } @$value;
          }
          else {
              push @terms, join("=", map { $self->_uri_escape($_) } $key, $value);
          }
      }

      return join("&", (ref $data eq 'ARRAY') ? (@terms) : (sort @terms) );
  }

  method can_ssl {
      my ($self) = @_;

      my($ok, $reason) = (1, '');

      # Need IO::Socket::SSL 1.42 for SSL_create_ctx_callback
      local @INC = @INC;
      pop @INC if $INC[-1] eq '.';
      unless (eval {require IO::Socket::SSL; IO::Socket::SSL->VERSION(1.42)}) {
          $ok = 0;
          $reason .= qq/IO::Socket::SSL 1.42 must be installed for https support\n/;
      }

      # Need Net::SSLeay 1.49 for MODE_AUTO_RETRY
      unless (eval {require Net::SSLeay; Net::SSLeay->VERSION(1.49)}) {
          $ok = 0;
          $reason .= qq/Net::SSLeay 1.49 must be installed for https support\n/;
      }

      # If an object, check that SSL config lets us get a CA if necessary
      if ( ref($self) && ( $self->{verify_SSL} || $self->{SSL_options}{SSL_verify_mode} ) ) {
          my $handle = HTTP::Tiny::Handle->new(
              SSL_options => $self->{SSL_options},
              verify_SSL  => $self->{verify_SSL},
          );
          unless ( eval { $handle->_find_CA_file; 1 } ) {
              $ok = 0;
              $reason .= "$@";
          }
      }

      wantarray ? ($ok, $reason) : $ok;
  }

  method connected {
      my ($self) = @_;

      if ( $self->{handle} ) {
          return $self->{handle}->connected;
      }
      return;
  }

  #--------------------------------------------------------------------------#
  # private methods
  #--------------------------------------------------------------------------#

  my %DefaultPort = (
      http => 80,
      https => 443,
  );

  method _request {
      my ($self, $method, $url, $options) = @_;

      my ($scheme, $host, $port, $path_query, $auth) = $self->_split_url($url);

      if ($scheme ne 'http' && $scheme ne 'https') {
        die(qq/Unsupported URL scheme '$scheme'\n/);
      }

      my $request = {
          method    => $method,
          scheme    => $scheme,
          host      => $host,
          port      => $port,
          host_port => ($port == $DefaultPort{$scheme} ? $host : "$host:$port"),
          uri       => $path_query,
          headers   => {},
      };

      my $peer = $options->{peer} || $host;

      # Allow 'peer' to be a coderef.
      if ('CODE' eq ref $peer) {
          $peer = $peer->($host);
      }

      # We remove the cached handle so it is not reused in the case of redirect.
      # If all is well, it will be recached at the end of _request.  We only
      # reuse for the same scheme, host and port
      my $handle = delete $self->{handle};
      if ( $handle ) {
          unless ( $handle->can_reuse( $scheme, $host, $port, $peer ) ) {
              $handle->close;
              undef $handle;
          }
      }
      $handle ||= $self->_open_handle( $request, $scheme, $host, $port, $peer );

      $self->_prepare_headers_and_cb($request, $options, $url, $auth);
      $handle->write_request($request);

      my $response;
      do { $response = $handle->read_response_header }
          until (substr($response->{status},0,1) ne '1');

      $self->_update_cookie_jar( $url, $response ) if $self->{cookie_jar};
      my @redir_options = $self->_maybe_redirect($request, $response, $options);

      my $known_message_length;
      if ($method eq 'HEAD' || $response->{status} =~ /^[23]04/) {
          # response has no message body
          $known_message_length = 1;
      }
      else {
          # Ignore any data callbacks during redirection.
          my $cb_options = @redir_options ? +{} : $options;
          my $data_cb = $self->_prepare_data_cb($response, $cb_options);
          $known_message_length = $handle->read_body($data_cb, $response);
      }

      if ( $self->{keep_alive}
          && $handle->connected
          && $known_message_length
          && $response->{protocol} eq 'HTTP/1.1'
          && ($response->{headers}{connection} || '') ne 'close'
      ) {
          $self->{handle} = $handle;
      }
      else {
          $handle->close;
      }

      $response->{success} = substr( $response->{status}, 0, 1 ) eq '2';
      $response->{url} = $url;

      # Push the current response onto the stack of redirects if redirecting.
      if (@redir_options) {
          push @{$options->{_redirects}}, $response;
          return $self->_request(@redir_options, $options);
      }

      # Copy the stack of redirects into the response before returning.
      $response->{redirects} = delete $options->{_redirects}
        if @{$options->{_redirects}};
      return $response;
  }

  method _open_handle {
      my ($self, $request, $scheme, $host, $port, $peer) = @_;

      my $handle  = HTTP::Tiny::Handle->new(
          timeout         => $self->{timeout},
          SSL_options     => $self->{SSL_options},
          verify_SSL      => $self->{verify_SSL},
          local_address   => $self->{local_address},
          keep_alive      => $self->{keep_alive}
      );

      if ($self->{_has_proxy}->get($scheme) && ! grep { $host =~ /\Q$_\E$/ } @{$self->{no_proxy}}) {
          return $self->_proxy_connect( $request, $handle );
      }
      else {
          return $handle->connect($scheme, $host, $port, $peer);
      }
  }

  method _proxy_connect {
      my ($self, $request, $handle) = @_;

      my @proxy_vars;
      if ( $request->{scheme} eq 'https' ) {
          _croak(qq{No https_proxy defined}) unless $self->{https_proxy};
          @proxy_vars = $self->_split_proxy( https_proxy => $self->{https_proxy} );
          if ( $proxy_vars[0] eq 'https' ) {
              _croak(qq{Can't proxy https over https: $request->{uri} via $self->{https_proxy}});
          }
      }
      else {
          _croak(qq{No http_proxy defined}) unless $self->{http_proxy};
          @proxy_vars = $self->_split_proxy( http_proxy => $self->{http_proxy} );
      }

      my ($p_scheme, $p_host, $p_port, $p_auth) = @proxy_vars;

      if ( length $p_auth && ! defined $request->{headers}{'proxy-authorization'} ) {
          $self->_add_basic_auth_header( $request, 'proxy-authorization' => $p_auth );
      }

      $handle->connect($p_scheme, $p_host, $p_port, $p_host);

      if ($request->{scheme} eq 'https') {
          $self->_create_proxy_tunnel( $request, $handle );
      }
      else {
          # non-tunneled proxy requires absolute URI
          $request->{uri} = "$request->{scheme}://$request->{host_port}$request->{uri}";
      }

      return $handle;
  }

  method _create_proxy_tunnel {
      my ($self, $request, $handle) = @_;

      $handle->_assert_ssl;

      my $agent = exists($request->{headers}{'user-agent'})
          ? $request->{headers}{'user-agent'} : $self->{agent};

      my $connect_request = {
          method    => 'CONNECT',
          uri       => "$request->{host}:$request->{port}",
          headers   => {
              host => "$request->{host}:$request->{port}",
              'user-agent' => $agent,
          }
      };

      if ( $request->{headers}{'proxy-authorization'} ) {
          $connect_request->{headers}{'proxy-authorization'} =
              delete $request->{headers}{'proxy-authorization'};
      }

      $handle->write_request($connect_request);
      my $response;
      do { $response = $handle->read_response_header }
          until (substr($response->{status},0,1) ne '1');

      # if CONNECT failed, throw the response so it will be
      # returned from the original request() method;
      unless (substr($response->{status},0,1) eq '2') {
          die $response;
      }

      # tunnel established, so start SSL handshake
      $handle->start_ssl( $request->{host} );

      return;
  }

  method _prepare_headers_and_cb {
      my ($self, $request, $options, $url, $auth) = @_;

      for ($self->{default_headers}, $options->{headers}) {
          next unless defined;
          while (my ($k, $v) = each %$_) {
              $request->{headers}{lc $k} = $v;
              $request->{header_case}{lc $k} = $k;
          }
      }

      if (exists $request->{headers}{'host'}) {
          die(qq/The 'Host' header must not be provided as header option\n/);
      }

      $request->{headers}{'host'}         = $request->{host_port};
      $request->{headers}{'user-agent'} ||= $self->{agent};
      $request->{headers}{'connection'}   = "close"
          unless $self->{keep_alive};

      # Some servers error on an empty-body PUT/POST without a content-length
      if ( $request->{method} eq 'PUT' || $request->{method} eq 'POST' ) {
          if (!defined($options->{content}) || !length($options->{content}) ) {
              $request->{headers}{'content-length'} = 0;
          }
      }

      if ( defined $options->{content} ) {
          if ( ref $options->{content} eq 'CODE' ) {
              if ( exists $request->{'content-length'} && $request->{'content-length'} == 0 ) {
                  $request->{cb} = method { "" };
              }
              else {
                  $request->{headers}{'content-type'} ||= "application/octet-stream";
                  $request->{headers}{'transfer-encoding'} = 'chunked'
                    unless exists $request->{headers}{'content-length'}
                    || $request->{headers}{'transfer-encoding'};
                  $request->{cb} = $options->{content};
              }
          }
          elsif ( length $options->{content} ) {
              my $content = $options->{content};
              if ( $] ge '5.008' ) {
                  utf8::downgrade($content, 1)
                      or die(qq/Wide character in request message body\n/);
              }
              $request->{headers}{'content-type'} ||= "application/octet-stream";
              $request->{headers}{'content-length'} = length $content
                unless $request->{headers}{'content-length'}
                    || $request->{headers}{'transfer-encoding'};
              $request->{cb} = method { substr $content, 0, length $content, '' };
          }
          $request->{trailer_cb} = $options->{trailer_callback}
              if ref $options->{trailer_callback} eq 'CODE';
      }

      ### If we have a cookie jar, then maybe add relevant cookies
      if ( $self->{cookie_jar} ) {
          my $cookies = $self->cookie_jar->cookie_header( $url );
          $request->{headers}{cookie} = $cookies if length $cookies;
      }

      # if we have Basic auth parameters, add them
      if ( length $auth && ! defined $request->{headers}{authorization} ) {
          $self->_add_basic_auth_header( $request, 'authorization' => $auth );
      }

      return;
  }

  method _add_basic_auth_header {
      my ($self, $request, $header, $auth) = @_;
      require MIME::Base64;
      $request->{headers}{$header} =
          "Basic " . MIME::Base64::encode_base64($auth, "");
      return;
  }

  method _prepare_data_cb {
      my ($self, $response, $options) = @_;
      my $data_cb = $options->{data_callback};
      $response->{content} = '';

      if (!$data_cb || $response->{status} !~ /^2/) {
          if (defined $self->{max_size}) {
              $data_cb = method {
                  $_[1]->{content} .= $_[0];
                  die(qq/Size of response body exceeds the maximum allowed of $self->{max_size}\n/)
                    if length $_[1]->{content} > $self->{max_size};
              };
          }
          else {
              $data_cb = method { $_[1]->{content} .= $_[0] };
          }
      }
      return $data_cb;
  }

  method _update_cookie_jar {
      my ($self, $url, $response) = @_;

      my $cookies = $response->{headers}->{'set-cookie'};
      return unless defined $cookies;

      my @cookies = ref $cookies ? @$cookies : $cookies;

      $self->cookie_jar->add( $url, $_ ) for @cookies;

      return;
  }

  method _maybe_redirect {
      my ($self, $request, $response, $options) = @_;
      my $headers = $response->{headers};
      my ($status, $method) = ($response->{status}, $request->{method});
      $options->{_redirects} ||= [];

      if (($status eq '303' or ($status =~ /^30[1278]/ && $method =~ /^GET|HEAD$/))
          and $headers->{location}
          and @{$options->{_redirects}} < $self->{max_redirect}
      ) {
          my $location = ($headers->{location} =~ /^\//)
              ? "$request->{scheme}://$request->{host_port}$headers->{location}"
              : $headers->{location} ;
          return (($status eq '303' ? 'GET' : $method), $location);
      }
      return;
  }

=cut
