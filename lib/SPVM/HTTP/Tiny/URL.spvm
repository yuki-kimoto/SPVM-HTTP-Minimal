# Copyright (c) 2023 [--user-name]
# MIT License

class HTTP::Tiny::URL {
  allow HTTP::Tiny;
  
  has scheme : string;
  has host : string;
  has port : int;
  has path : string;
  has auth : string;
  
  static method new : HTTP::Tiny::URL ($options : object[]) {
    
    my $self = new HTTP::Tiny::URL;
    
    $self->{port} = -1;
    
    return $self;
  }
  
  static method parse : HTTP::Tiny::URL ($string : string) {
    
    # URI regex adapted from the URI module
    my $scheme = (string)undef;
    my $host = (string)undef;
    my $path_query = (string)undef;
    
    if (my $match = Regex->new("\A([^:/?#]+)://([^/?#]*)([^#]*)")->match($url)) {
      $scheme = $match->cap1;
      $host = $match->cap2;
      $path_query = $match->cap3;
    }
    else {
      die "Cannot parse URL: \"$url\"";
    }
    
    $scheme = Fn->lc($scheme);
    
    unless (Regex->new("\A/")->match($path_query)) {
      $path_query = "/$path_query";
    }
    
    my $auth = "";
    if ((my $i = Fn->index($host, '@')) != -1 ) {
      # user:pass@host
      $auth = &substr_replacement($host, 0, $i, ""); # take up to the @ for auth
      &substr_replacement($host, 0, 1, "");          # knock the @ off the host
      
      # userinfo might be percent escaped, so recover real auth info
      Regex->new("%([0-9A-Fa-f]{2})")->replace_g($auth, method : string ($re : Regex, $match : Regex::Match) {
        return Fn->chr(Fn->hex($match->cap1));
      });
    }
    
    my $port = (string)undef;
    
    my $replace_info_ref = [(Regex::ReplaceInfo)undef];
    if (Regex->new(":(\d*)\z")->replace($host, "", 0, -1, {info => $replace_info_ref})) {
      my $match = $replace_info_ref->[0]->match;
      $port = $match->cap1;
    }
    
    unless ($port) {
      if ($scheme eq "http") {
        $port = "80";
      }
      elsif ($scheme eq "https") {
        $port = "443";
      }
    }
    
    if ($host) {
      $host = Fn->lc($host);
    }
    else {
      $host = "localhost";
    }
    
    return $url;
  }
  
  private static method substr_replacement : string ($string : string, $offset : int, $length : int = -1, $replacement : string = undef) {
    
    unless ($string) {
      die "The \$string must be defined.";
    }
    
    unless ($offset >= 0) {
      die "The \$offset must be greater than or equal to 0.";
    }
    
    my $string_length = length $string;
    if ($length < 0) {
      $length = $string_length - $offset;
    }
    
    unless ($offset + $length <= $string_length) {
      die "The \$offset + the \$length must be less than or equal to the length of the \$string.";
    }
    
    my $substring = (string)undef;
    if ($replacement) {
      
      $substring = Fn->substr($string, 0, $offset) . $replacement . Fn->substr($string, $length - $offset);
    }
    else {
      $substring = (mutable string)new_string_len($length);
      Fn->memcpy($substring, 0, $string, $offset, $length);
    }
    
    return $substring;
  }
}
