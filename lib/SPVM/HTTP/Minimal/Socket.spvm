# Copyright (c) 2023 Yuki Kimoto
# MIT License

class HTTP::Minimal::Socket {
  allow HTTP::Minimal;
  
  use Fn;
  use Format;
  use HTTP::Minimal::SocketInterface;
  use IO::Socket::INET;
  use Sys::Socket::Constant as SOCKET;
  use Errno;
  use Sys::Signal;
  use SYS::Signal::Constant as SIGNAL;
  
  our $TOKEN : string;
  our $FIELD_CONTENT : string;
  
  INIT {
    $TOKEN = "[\x21\x23-\x27\x2A\x2B\x2D\x2E\x30-\x39\x41-\x5A\x5E-\x7A\x7C\x7E]";
    $FIELD_CONTENT = "[[:print:]]+(?:[\x20\x09]+[[:print:]]+)*";
  }
  
  private enum {
    READ_BUFFER_SIZE = 32768,
  }
  
  has peer_host : int;
  has peer_port : int;
  has local_address : string;
  has proto : string;
  has type : int;
  has timeout : int;
  
  has socket_builder : HTTP::Minimal::SocketBuilder;
  has timeout : int;
  
  has handle : HTTP::Minimal::SocketInterface;
  has read_buffer : mutable string;
  
  static method new : HTTP::Minimal::Socket ($options : object[]) {
    
    my $self = new HTTP::Minimal::Socket;
    
    # The read_buffer field
    my $read_buffer = (mutable string)new_string &READ_BUFFER_SIZE();
    $self->{read_buffer} = $read_buffer;
    
    # The timeout field
    my $timeout = $options->delete_or_default_int("timeout", 60);
    $self->{timeout} = $timeout;
    
    # The socket_builder field
    my $socket_builder = (HTTP::Minimal::SocketBuilder)$options->delete_or_default("socket_builder");
    unless ($socket_builder) {
      my $socket_builder =
        [
          has peer_host : int = $peer_host,
          has peer_port : int = $peer_port,
          has local_address : string = $local_address,
          has proto : string = "tcp",
          has type : int = SOCKET->SOCK_STREAM,
          has timeout : int = $timeout,
        ]
        method : HTTP::Minimal::SocketInterface () {
          my $socket = (HTTP::Minimal::SocketInterface)IO::Socket::INET->new(
            PeerHost  => $self->{peer_host},
            PeerPort  => $self->{peer_port},
            LocalAddr => $self->{local_address},
            Proto     => $self->{proto},
            Type      => $self->{type},
            Timeout   => $self->{timeout},
          );
          
          return $socket;
        };
    }
    $self->{socket_builder} = $socket_builder;
    
    return $self;
  }
  
  private method connect ($request : HTTP::Minimal::Request) {
    
    my $socket_builder = $self->{socket_builder};
    
    my $socket = $socket_builder->();
    $self->{handle} = $socket;
    
    return $self;
  }
  
  private method connected : HTTP::Minimal::HostPort () {
    my $connected = (HTTP::Minimal::HostPort)undef;
    if ($self->{handle} && $self->{handle}->connected) {
      my $peer_host = $self->{handle}->peerhost;
      my $peer_port = $self->{handle}->peerport;
      $connected = HTTP::Minimal::HostPort->new($peer_host, $peer_port);
    }
    
    return $connected;
  }
  
  private method write_request : void ($request : HTTP::Minimal::Request) {
    $self->write_request_header($request);
    $self->write_body($request);
  }
  
  private method write_request_header : void ($request : HTTP::Minimal::Request) {
    
    my $method = $request->{method};
    my $url = $request->{url}->to_string;
    my $headers = $request->{headers};
    
    my $request_line = "$method $url HTTP/1.1\r\n";
    
    $self->write($request_line);
    
    my $header_lines = $headers->to_string;
    
    $self->write($header_lines);
    
    my $content_length_header = $request->headers->get("content-length");
    unless ($content_length_header) {
      my $content = $request->{content};
      
    }
  }
  
  private method write_body {
    my ($self, $request) = @_;
    
    my $content_length = $request->headers->get("content-length");
    
    unless ($content_length) {
      return;
    }
    
    while () {
      my $data = $request->{cb}->();
      
      defined $data && length $data
        or last;
      
      $length += $self->write($data);
    }
    
    $length == $content_length
      or die("Content-Length mismatch (got: $length expected: $content_length)\n");
    
    return $length;
  }
  
  private method write : int ($buffer : string) {
    
    my $old_pipe_signal = Sys::Signal->signal(SIGNAL->SIGPIPE, Sys::Signal->SIG_IGN);
    my $restore_signal = Scope::Guard->new([old_pipe_signal : int = $old_signal] method : void () {
      Sys::Signal->signal(SIGNAL->SIGPIPE, $self->{old_pipe_signal});
    }):
    
    my $length = length $buffer;
    my $offset = 0;
    while (1) {
      my $can_write = $self->can_write;
      unless ($can_write) {
        die "Timed out while waiting for socket to become ready for writing";
      }
      
      my $socket = $self->{handle};
      
      Errno->set_errno(0);
      my $read_length = $socket->syswrite($buffer, $length, $offset);
      my $errno = Errno->errno;
      
      if ($read_length >= 0) {
        $length -= $read_length;
        $offset += $read_length;
        last unless $length > 0;
      }
      elsif ($errno == Errno->EPIPE) {
        die("Socket closed by remote server: $!\n");
      }
      elsif ($errno != Errno->EINTR) {
        die("Could not write to socket: '$!'\n");
      }
    }
    
    return $offset;
  }
  
  private method read ($length : int, $allow_partial : int) {
    
    my $buffer  = '';
    my $got = length $self->{read_buffer};
    
    if ($got) {
      my $take = ($got < $length) ? $got : $length;
      $buffer  = substr($self->{read_buffer}, 0, $take, '');
      $length -= $take;
    }
    
    my $old_pipe_signal = Sys::Signal->signal(SIGNAL->SIGPIPE, Sys::Signal->SIG_IGN);
    my $restore_signal = Scope::Guard->new([old_pipe_signal : int = $old_signal] method : void () {
      Sys::Signal->signal(SIGNAL->SIGPIPE, $self->{old_pipe_signal});
    }):
    
    while ($length > 0) {
      my $can_read = $self->can_read;
      
      unless ($can_read) {
        die "Timed out while waiting for socket to become ready for reading";
      }
      
      my $socket = $self->{handle};
      
      Errno->set_errno(0);
      my $read_length = $socket->sysread($buffer, $length, length $buffer);
      my $errno = Errno->errno;
      
      if ($read_length >= 0) {
        if ($read_length == 0) {
          last;
        }
        $length -= $read_length;
      }
      elsif ($errno != EINTR) {
        die "Could not read from socket: \"$!\"";
      }
    }
    if ($length && !$allow_partial) {
      die "Unexpected end of stream";
    }
    
    return $buffer;
  }
  
  private method readline {

    while () {
      if ($self->{read_buffer} =~ s/\A ([^\r\n]* \r?\n)//x) {
        return $1;
      }
      $self->can_read
        or die("Timed out while waiting for socket to become ready for reading\n");
      
      my $r = sysread($self->{handle}, $self->{read_buffer}, BUFSIZE, length $self->{read_buffer});
      if (defined $r) {
        last unless $r;
      }
      elsif ($! != EINTR) {
        die("Could not read from socket: '$!'\n");
      }
    }
    die("Unexpected end of stream while looking for line\n");
  }

  private method read_header_lines : HTTP::Minimal::Headers ($headers : HTTP::Minimal::Headers) {
    $headers ||= {};
    my $lines   = 0;
    my $val;

    while () {
       my $line = $self->readline;

       if ($line =~ /\A ([^\x00-\x1F\x7F:]+) : [\x09\x20]* ([^\r\n]*)/x) {
         my ($field_name) = lc $1;
         if (exists $headers->{$field_name}) {
           for ($headers->{$field_name}) {
             $_ = [$_] unless ref $_ eq "ARRAY";
             push @$_, $2;
             $val = \$_->[-1];
           }
         }
         else {
             $val = \($headers->{$field_name} = $2);
         }
       }
       elsif ($line =~ /\A [\x09\x20]+ ([^\r\n]*)/x) {
         $val
           or die("Unexpected header continuation line\n");
         next unless length $1;
         $$val .= ' ' if length $$val;
         $$val .= $1;
       }
       elsif ($line =~ /\A \r?\n \z/x) {
          last;
       }
       else {
          die(q/Malformed header line: / . $line . "\n");
       }
    }
    return $headers;
  }

  # return value indicates whether message length was defined; this is generally
  # true unless there was no content-length header and we just read until EOF.
  # Other message length errors are thrown as exceptions
  private method read_body {
    my ($self, $cb, $response) = @_;
    my $te = $response->{headers}{'transfer-encoding'} || '';
    return $self->read_content_body($cb, $response);
  }

  private method read_content_body ($cb, $response : HTTP::Minimal::Response) {
    my $content_length = $response->headers->header("Content-Length");
    
    if ($content_length >= 0) {
      my $length = $content_length;
      while ($length > 0) {
        my $read = ($length > BUFSIZE) ? BUFSIZE : $length;
        $cb->($self->read($read, 0), $response);
        $length -= $read;
      }
    }
    else {
      die "[Unexpected Error]";
    }
    
    return length($self->{read_buffer}) == 0;
  }

  private method read_response_header {

    my $line = $self->readline;

    $line =~ /\A (HTTP\/(0*\d+\.0*\d+)) [\x09\x20]+ ([0-9]{3}) (?: [\x09\x20]+ ([^\r\n]*) )? \r?\n/x
      or die(q/Malformed Status-Line: / . $line. "\n");

    my ($protocol, $version, $status, $reason) = ($1, $2, $3, $4);
    $reason = "" unless defined $reason;

    die ("Unsupported HTTP protocol: $protocol\n/)
        unless $version =~ /0*1\.0*[01]/;

    return {
        status       => $status,
        reason       => $reason,
        headers      => $self->read_header_lines,
        protocol     => $protocol,
    };
  }

  private method _do_timeout {
    my ($self, $type, $timeout) = @_;
    $timeout = $self->{timeout}
        unless defined $timeout && $timeout >= 0;
    
    my $handle = fileno $self->{handle};
    defined $handle && $handle >= 0
      or die("select(2): 'Bad file descriptor'\n");
    
    my $initial = time;
    my $pending = $timeout;
    my $nfound;
    
    vec(my $fdset = '', $handle, 1) = 1;
    
    while () {
      $nfound = ($type eq 'read')
        ? select($fdset, undef, undef, $pending)
        : select(undef, $fdset, undef, $pending) ;
      if ($nfound == -1) {
        $! == EINTR
          or die("select(2): '$!'\n");
        redo if !$timeout || ($pending = $timeout - (time - $initial)) > 0;
        $nfound = 0;
      }
      last;
    }
    $! = 0;
    return $nfound;
  }
  
  private method can_read ($type : string, $timeout : int) {
    my $can_read = $self->_do_timeout("read", $type, $timeout);
    return $can_read;
  }
  
  private method can_write ($type : string, $timeout : int) {
    my $can_write = $self->_do_timeout("write", $type, $timeout);
    return $can_write;
  }
}
