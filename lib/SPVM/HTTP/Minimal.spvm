# Copyright (c) 2023 Yuki Kimoto
# MIT License

class HTTP::Minimal {
  version "0.001_001";
  
  use Fn;
  use Regex;
  use Hash;
  use Sys;
  use Format;
  use Sys::Time::Tm;
  use HTTP::Minimal::Socket;
  use HTTP::Minimal::Error;
  use HTTP::Minimal::Response;
  use HTTP::Minimal::Headers;
  use HTTP::Minimal::URL;
  use HTTP::Minimal::HostPort;
  
  has agent : ro string;
  has timeout : ro int;
  has socket : HTTP::Minimal::Socket;
  
  static method new : HTTP::Minimal ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $self = new HTTP::Minimal;
    
    # timeout
    $self->{timeout} = $options_h->delete_or_default_int("timeout", 60);
    
    # agent
    my $agent = $options_h->delete_or_default_string("agent");
    if ($agent) {
      if (Regex->new(" $")->match($agent)) {
        $agent .= $self->_create_default_agent;
      }
    }
    else {
      $agent = $self->_create_default_agent;
    }
    
    $self->{agent} = $agent;
    
    return $self;
  }
  
  method get : HTTP::Response ($url : string|HTTP::Minimal::URL, $options : object[] = undef) {
    my $response = $self->_request("GET", $url, $options);
    return $response;
  }
  
  private method _request : Hash ($method : string, $url : string|HTTP::Minimal::URL, $options : object[])  {
    
    my $options_h = Hash->new($options);
    
    unless ($url isa string || $url ias HTTP::Minimal::URL) {
      die "The \$url msut be a string or HTTP::Minimal::URL object";
    }
    
    my $url_object = (HTTP::Minimal::URL)undef;
    if ($url ias string) {
      $url_object = HTTP::Minimal::URL->parse((string)$url);
    }
    else {
      $url_object = $url;
    }
    
    # HTTP Header
    my $headers = HTTP::Minimal::Headers->new;
    my $host = $url_object->host;
    my $port = $url_object->port;
    if ($port < 0) {
      $port = 80;
    }
    $headers->add("Host" => "$host:$port");
    $headers->add("User-Agent" => $self->{agent});
    $headers->add("Connection" => "close");
    
    my $request = HTTP::Minimal::Message::Request->new({
      method    => $method,
      url => $url_object;,
      headers   => $headers,
    });
    
    my $socket  = HTTP::Minimal::Socket->new({
      timeout => $self->{timeout},
      data_callback => $options_h->get("data_callback"),
    });
    
    $socket->connect($request);
    
    $socket->write_request($request);
    
    my $response = $socket->read_response;
    
    return $response;
  }
  
  private method _create_default_agent : string () {
    
    my $default_agent = "SPVM HTTP::Minimal";
    
    my $version = Fn->get_version_string("HTTP::Minimal");
    
    $default_agent .= "/$version";
    
    return $default_agent;
  }
}
